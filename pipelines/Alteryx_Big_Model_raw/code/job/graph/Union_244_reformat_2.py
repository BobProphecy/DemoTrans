from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from job.config.ConfigStore import *
from job.udfs.UDFs import *

def Union_244_reformat_2(spark: SparkSession, in0: DataFrame) -> DataFrame:
    return in0.select(
        col("IsLastDayOfMonth").cast(IntegerType()).alias("IsLastDayOfMonth"), 
        col("IsLastDayofQuarter").cast(BooleanType()).alias("IsLastDayofQuarter"), 
        lit(None).cast(StringType()).alias("Entry"), 
        lit(None).cast(DoubleType()).alias("Days per Month"), 
        lit(None).cast(StringType()).alias("Part Wildcard"), 
        lit(None).cast(StringType()).alias("Plating"), 
        lit(None).cast(StringType()).alias("Routing"), 
        lit(None).cast(DoubleType()).alias("Average Hourly Output"), 
        lit(None).cast(StringType()).alias("Machine Group Notes"), 
        lit(None).cast(IntegerType()).alias("ProcessOrderId"), 
        lit(None).cast(StringType()).alias("WorkCenterNumber"), 
        lit(None).cast(DoubleType()).alias("Daily Production Hours"), 
        lit(None).cast(StringType()).alias("Facility Machine Group Name"), 
        date_format(to_date(lit(None), "yyyy-MM-dd HH:mm:ss.SSSS"), "yyyy-MM-dd HH:mm:ss.SSSS")\
          .alias("ManufacturingDueDate"), 
        lit(None).cast(DoubleType()).alias("SetupHours"), 
        lit(None).cast(StringType()).alias("ReceivingChannels"), 
        lit(None).cast(StringType()).alias("Polarized"), 
        lit(None).cast(IntegerType()).alias("QuantityRequired"), 
        lit(None).cast(StringType()).alias("StrainRelief"), 
        lit(None).cast(StringType()).alias("Country"), 
        lit(None).cast(StringType()).alias("Latching"), 
        lit(None).cast(DoubleType()).alias("RunHours"), 
        lit(None).cast(StringType()).alias("Length"), 
        lit(None).cast(DoubleType()).alias("Days per Quarter"), 
        lit(None).cast(StringType()).alias("Machine Type"), 
        lit(None).cast(StringType()).alias("Retention"), 
        lit(None).cast(StringType()).alias("CableRetention"), 
        lit(None).cast(StringType()).alias("ReverseConnector"), 
        lit(None).cast(StringType()).alias("ScrewRetention"), 
        lit(None).cast(StringType()).alias("Like Part"), 
        lit(None).cast(DoubleType()).alias("Pipeline"), 
        lit(None).cast(IntegerType()).alias("QTYProcessedWC"), 
        lit(None).cast(StringType()).alias("Facility"), 
        lit(None).cast(StringType()).alias("Finished Good Part"), 
        lit(None).cast(StringType()).alias("WireGauge"), 
        lit(None).cast(StringType()).alias("Rows"), 
        lit(None).cast(StringType()).alias("Speed"), 
        lit(None).cast(IntegerType()).alias("ScrapQuantity"), 
        lit(None).cast(StringType()).alias("MiddleReverse"), 
        lit(None).cast(StringType()).alias("Plant"), 
        lit(None).cast(DoubleType()).alias("ScrapHours"), 
        lit(None).cast(IntegerType()).alias("QTYProcessedPO"), 
        lit(None).cast(StringType()).alias("WorkCenter"), 
        lit(None).cast(StringType()).alias("Part Number"), 
        lit(None).cast(StringType()).alias("SpaceOption"), 
        lit(None).cast(DoubleType()).alias("Projected Annual Growth"), 
        lit(None).cast(StringType()).alias("ReviewBoard"), 
        lit(None).cast(StringType()).alias("Breakout"), 
        lit(None).cast(StringType()).alias("SurfaceMount"), 
        lit(None).cast(StringType()).alias("LeadFree"), 
        date_format(to_date(lit(None), "yyyy-MM-dd HH:mm:ss.SSSS"), "yyyy-MM-dd HH:mm:ss.SSSS").alias("DeliveryDueDate"), 
        lit(None).cast(StringType()).alias("Plant Process Code"), 
        lit(None).cast(StringType()).alias("Packaging"), 
        lit(None).cast(BooleanType()).alias("isMatch"), 
        lit(None).cast(StringType()).alias("MechanicalSample"), 
        lit(None).cast(StringType()).alias("Engines"), 
        lit(None).cast(StringType()).alias("DaisyChain"), 
        lit(None).cast(StringType()).alias("DifferentialPair"), 
        lit(None).cast(StringType()).alias("TransmittingChannels"), 
        lit(None).cast(DoubleType()).alias("CompletedHours"), 
        lit(None).cast(StringType()).alias("DeadChannels"), 
        lit(None).cast(StringType()).alias("WiringOption"), 
        lit(None).cast(StringType()).alias("Automation Level"), 
        lit(None).cast(StringType()).alias("Alignment"), 
        lit(None).cast(StringType()).alias("ReportingSeriesCode"), 
        lit(None).cast(StringType()).alias("Ends"), 
        lit(None).cast(DoubleType()).alias("Machine Group ID"), 
        lit(None).cast(StringType()).alias("FiberType"), 
        lit(None).cast(IntegerType()).alias("OrderNumber"), 
        lit(None).cast(IntegerType()).alias("LineNumber"), 
        lit(None).cast(IntegerType()).alias("QTYproducedTotal"), 
        lit(None).cast(BooleanType()).alias("IsProcessCompleted"), 
        lit(None).cast(DoubleType()).alias("Target Utilization"), 
        lit(None).cast(StringType()).alias("Shield"), 
        lit(None).cast(IntegerType()).alias("ManufacturingOrderId"), 
        lit(None).cast(StringType()).alias("Pad"), 
        lit(None).cast(StringType()).alias("ReverseWire"), 
        lit(None).cast(StringType()).alias("OutsideReverse"), 
        lit(None).cast(StringType()).alias("ReverseNotch"), 
        lit(None).cast(StringType()).alias("CableOptions"), 
        lit(None).cast(StringType()).alias("Gender"), 
        lit(None).cast(StringType()).alias("Pitch"), 
        lit(None).cast(StringType()).alias("Lead"), 
        lit(None).cast(StringType()).alias("Process"), 
        lit(None).cast(BooleanType()).alias("IsCustomerOrder"), 
        lit(None).cast(StringType()).alias("PowerPins"), 
        lit(None).cast(StringType()).alias("Notch"), 
        lit(None).cast(IntegerType()).alias("StepNumber"), 
        lit(None).cast(StringType()).alias("Tooling Set"), 
        lit(None).cast(StringType()).alias("OpticsType"), 
        lit(None).cast(StringType()).alias("Mount"), 
        lit(None).cast(StringType()).alias("OpticEnd"), 
        lit(None).cast(StringType()).alias("Key"), 
        lit(None).cast(StringType()).alias("Positions"), 
        lit(None).cast(StringType()).alias("Direction")
    )
